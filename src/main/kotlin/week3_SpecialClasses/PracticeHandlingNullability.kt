package week3_SpecialClasses

// IT department of a large school
// The school has a list of students
// allow the staff to search and retrieve a studentâ€™s information using either their name or their student ID
// in a real-world project, the student ID is normally generated by the system for each student.
// Therefore, you can depend on it being accurate and being present for each stored student
// if the user searches for a student by ID and that ID is not present, the program should return null or error
// if the user searches for a student by name and that name is not present, then the program should display "The student is not found"

class StudentManager(bootstrapStudent: BootstrapStudent) {
    private val students: List<Student>

    init {
        students = bootstrapStudent.bootstrap()
    }

    fun getStudentById(id: Int): Student =
        getStudentByPredicate { it.id == id } ?: throw NullPointerException()

    fun getStudentByName(name: String): Student? =
        getStudentByPredicate { it.fullName.lowercase() == name.lowercase() }

    private fun getStudentByPredicate(predicate: (Student) -> Boolean): Student? =
        if (students.any(predicate))
            students.find(predicate)
        else
            null

    fun hasStudents() = students.isNotEmpty()
}

interface BootstrapStudent {
    fun bootstrap(): List<Student>
}

class BootstrapStudentOriginal : BootstrapStudent {
    override fun bootstrap() = listOf(
        Student(223, "John", 140.0),
        Student(548, "Mark", 120.0),
        Student(342, "Natali", 150.0),
        Student(781, "Sara", 130.0),
    )
}

data class Student(val id: Int, val fullName: String, val grade: Double = 0.0)


class BootstrapStudentDummy : BootstrapStudent {
    override fun bootstrap() = (1..50).map { Student(it, "Student $it") }
}

fun main() {
    val studentManager = StudentManager(BootstrapStudentOriginal())
    while (true) {
        print("Please enter the Student Id: ")
        val studentId: Int? = readln().toIntOrNull()
        if (studentId == -1) {
            println("Goodbye")
            break
        }
        if (studentId != null) {
            try {
                val studentById = studentManager.getStudentById(studentId)
                println(studentById)
                print("Please enter the Student Name: ")
                val studentByName = studentManager.getStudentByName(readln())
                println(studentByName ?: "The student is not found")
            } catch (e: NullPointerException) {
                println(e)
            }
        } else {
            println("Wrong id. Please enter an integer number.")
        }
    }
}